<?xml version="1.0" encoding="utf-8" ?>
<odoo>
    <record id="ir_server_action_wa_committee_approve" model="ir.actions.server">
        <field name="name">WA: Committee Approved</field>
        <field name="model_id" ref="purchase_work_acceptance.model_work_acceptance" />
        <field name="state">code</field>
        <field name="code">
# Write comment and status = accepted / not accepted / other
tier_reviews = record.review_ids.filtered(lambda l: l.done_by == env.user)
comment = ",".join(tier_reviews.mapped("comment"))
committee = record.work_acceptance_committee_ids.filtered(lambda l: l.employee_id.user_id == env.user)
if env.context.get("validate_as_other"):
    committee.write({"status": "other", "note": comment})
elif env.context.get("validate_as_not_accept"):
    committee.write({"status": "not_accept", "note": comment})
else:
    committee.write({"status": "accept", "note": comment})
        </field>
    </record>

    <record id="ir_server_action_wa_committee_reject" model="ir.actions.server">
        <field name="name">WA: Committee Rejected</field>
        <field name="model_id" ref="purchase_work_acceptance.model_work_acceptance" />
        <field name="state">code</field>
        <field name="code">
# Write comment and status = rejected (currently not used)
tier_reviews = record.review_ids.filtered(lambda l: l.done_by == env.user)
comment = ",".join(tier_reviews.mapped("comment"))
committee = record.work_acceptance_committee_ids.filtered(lambda l: l.employee_id.user_id == env.user)
committee.write({"status": "not_accept", "note": comment})
        </field>
    </record>
</odoo>
